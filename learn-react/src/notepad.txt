import CourseItem from "./CourseItem.jsx";  /* import 시 확장자를 붙여도 안붙여도 무방하지만, 전자가 native ES Modules 사용 방법에 더 가까움 */


/* 컴포넌트에 return 에 소괄호가 없으면 이 다음 코드문장은 모두 무시가 됩니다. 반드시 작성
   jsx 문법에서 className으로 사용해야 함 (class로 사용시 오류 발생)
   필요시 HTML to JSX 변환 사이트 존재하므로 사용하기
*/
export default function CourseListCard() {
  return (
    <div className="card">
      ...
    </div>
  );
}

/* 함수 선언식 : 컴포넌트 상태, 로직인 경우 권유 */
/* 함수 선언식에 export default를 통해 최하단의 export default 생략 가능 */
export default function Counter() {  // ! 반드시 Pascal 함수명은 Case로 작성
    return (  // 컴포넌트 호출 시 Return 할 HTML 작성
        <button>Counter</button>
    )
}


/* 함수 표현식 : UI만 담당하는 경우 및 상태를 사용하지 않는 컴포넌트에 일반적으로 사용 */
/* 함수 표현식에 export를 사용함으로서 return 문 생략 가능 */
export const Counter = () => {
    // return ( // => return 문 생략 가능
      <button>Counter</button>
    // )
}


/* JSX */
    JSX는 JavaScript XML의 약어로, JS 확장 문법
    확장자를 .js .jsx하든 상관은 없지만, 리액트 컴포넌트에서는 JSX 문법을 사용하고 그안에서 HTML을 사용하기에 .jsx 사용 권장
    Vite로 빌드 한 경우는 파일 확장자에 따라 어떻게 처리할지 결정되기 때문에 .jsx 확장자가 필수

    규칙 1. 하나의 루트 엘리먼트로 반환하기
        오류 예제)
            return(
                <h1>...<h1>
                <h2>...<h2>
            )

        정상 예제)  만약 이때, div 태그를 랜더링 하지 않고 부모태그로 묶고싶다면 .. <> ... <> 와 같이 Fragment로 생략 가능
            return(
                <div>
                    ...
                </div>
            )

    규칙 2. 모든 태그는 닫아 주기

    규칙 3. 대부분 Camel Case 로 작성 하기

        JSX는 JS로 바뀌고 JSX에서 작성된 Attribute는 JS 객체 키가 되기 때문에, 컴포넌트에서 종종 Attribute를 변수로 읽고 싶은 경우가 있음.
        이 때, JS는 변수명에 제한이 있는데, -를 포험하거나 class처럼 예약어를 사용할 수 없기에 Camel Case로 작성하는 이유.
        예외) aria-*, data-*

    JSX 에서 자바스크립트 사용 return을 활용해 비즈니스 로직이 사용 가능

        export default function CourseItem(props) {

          const isEmpty = true;

          if (isEmpty) {
            return (
              <p>강의가 없습니다.</p>
            )
          }

          return (
            <article className="course">
              <img className="course__img" src="./img/htmlcss.png" alt="" />
              <div className="course__body">
                <div className="course__title">입문자를 위한, HTML&CSS 웹 개발 입문</div>
                <div className="course__description">웹 개발에 필요한 기본 지식을 배웁니다. </div>
              </div>
            </article>
          );
        }

    * 속성에 문자열 전달 : 작은따옴표나 큰따옴표로 묶어야 함
        export default function Avatar() {
          const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';
          const description = 'Gregorio Y. Zara';
          return (
            <img
              className="avatar"
              src={avatar}
              alt={description}
            />
          );
        }

    * 마크업내에서 자바스크립트 사용
        const today = new Date();

        function formatDate(date) {
          return new Intl.DateTimeFormat(
            'en-US',
            { weekday: 'long' }
          ).format(date);
        }

        export default function TodoList() {
          return (
            <h1>To Do List for {formatDate(today)}</h1>
          );
        }

    * 중괄호 사용
        1. JSX 태그 안의 문자
            <h1>{name}'s To Do List</h1>                    : 동작
            <{tag}>Gregorio Y. Zara's To Do List</{tag}>    : 오류
            src={avatar}                                    : 동작
            src="{avatar}"                                  : 문자열 전달

        2. 이중 중괄호
            객체인 경우 중괄호를 감싸서 객체를 전달, 만약 인라인 스타일이 필요한 경우에도 (JSX에서는 인라인으로 style 선언하면 에러 발생함)
            style={{ backgroundColor: 'black', color: 'white' }}

            person={{ name: ‘짐코딩’, age: 20 }}
            <Component
            	person={{ name: '짐코딩', age: 20 }}
            />


/* import React from 'react' 에 대해서 */
    * JSX의 새로운 변환
    import React from 'react'; 를 사용하는 이유는 React 라이브러리 내에서 JSX를 컴파일 할 수 있도록 하기 위함이 가장 큰 이유.


    function Counter(props) {
        return (
            <div>
                count
            </div>
        );
    }

    는 다음과 같이 변환

    function Counter(props) {
        return React.createElement('div', null, 'count');
    }

    여기서 추가로 React 17 부터 JSX 트랜스 폼이 도입되며 더이상 React를 명시적으로 import할 필요가 없어졌음.

    주의) React 17 이하 버전인 경우 및 JSX 트랜스포 설정하지 않은 경우 import React from 'react'; 문장 필수 요소


/* 컴포넌트에 props 전달 */
리액트 컴포넌트는 props를 이용해 서로 통신
객체, 배열, 함수를 포함한 모든 JS 값 전달 가능

예시)
<img
  className="avatar"
  src="https://i.imgur.com/1bX5QH6.jpg"
  alt="Lin Lanying"
  width={100}
  height={100}
/>
이미지 태그에 전달할 수 있는 props는 미리 정의 되어있음.

하지만 개인이 생성한 어떤 컴포넌트는 props를 전달 가능.

function Avatar({ person, size }) {  // ...}

 * 구조분해 할당 :  배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 JavaScript 표현식
function Avatar(props) {
	let person = props.person;
	let size = props.size;  // ...
}

* JSX spread 문법으로 props 전달하기
function Profile({ person, size, isSepia, thickBorder }) {
  return (
    <div className="card">
      <Avatar
        person={person}
        size={size}
        isSepia={isSepia}
        thickBorder={thickBorder}
      />
    </div>
  );
}

=>

function Profile(props) {
  return (
    <div className="card">
      <Avatar {...props} />     /* ...props내에 JS 전개구문과 유사하게 props 내부에 담겨있음 */
    </div>
  );
}



 * 유의사항
    이러한 **spread 문법은 제한적으로 사용하세요**. 다른 모든 컴포넌트에 이 구문을 사용한다면 문제가 있는 것입니다.

    1. **가독성 저하**: 코드가 읽기 어려워질 수 있어요. 어떤 속성이 어떤 값인지 바로 이해하기 힘들어질 수 있습니다.
    2. **버그 발생 가능성 증가**: 예기치 않은 속성이 전달될 수 있어요. 특히 많은 props가 있는 경우, 불필요한 속성이 전달될 위험이 커집니다.
    3. **리팩토링 어려움**: 컴포넌트를 분할하거나 재사용할 때, props를 명시적으로 전달하지 않으면 나중에 문제가 생길 수 있어요.


* 조건부 랜더링
조건분기시 랜더링을 원치 않는다면 null 반환
    ** 단락 평가
    앞에 연산결과를 고려하여 뒤에 평가 여부를 할지 말지 ..

    ex)
    result = "" && "foo";       // result 에 "" 할당
    result = 2 && 0;            // result 에 0 할당
    result = "foo" && 4;        // result 에 4 할당

* 리스트 랜더링
리액트에서 유사한 컴포넌트를 N개 표시하고 싶은 경우 사용.
=> map(), filter()를 사용하여 배열 필터링 & 컴포넌트 배열 변환하여 랜더링
=> JS의 Array API 참고
주의) 리스트에서는 unique key를 통해 항목을 지정해야한다.

* 이벤트 핸들러
Client의 클릭, input 키보드 타이핑 등 상호작용에 따라 실행되는 사용자 정의함수
=> React에서는 JSX에 이벤트 핸들러 추가 가능
=> React DOM 컴포넌트 : React는 브라우저에 내장된 모든 HTML과 SVG를 지원
=> 참고) https://ko.react.dev/reference/react-dom/components
 ** 주의사항 (이벤트 핸들러는 함수를 실행하면 안된다. !! -> 랜더링 시에 함수가 바로 호출되어버림.)
    + 이벤트에 이벤트 핸들러 함수로 전달하게되면 첫번 째 매개변수로 event 객체를 받게 됨. 부모에서도 필요하다면 event 객체를 props로 전달하기

* 이벤트 전파 (버블링 & 캡쳐링 기본지식 필수)
 - onClick + Capture => onClickCapture로 이벤트 작성시 캡쳐링 모드로 이벤트 전파
 - event 객체를 props로 전달 받아 event.stopPropagation();을 수행 시 버블링 전파 차단
 - 기본 동작을 막을 수 있는 event.preventDefault(); 또한 존재 (submit 시)

https://gymcoding.notion.site/b154e07433604fa9b1e21ce03daf0ae1

* State
JS 문법으로 값을 변경 시켜도 UI에 바로 반영되지 않음.
=> useState로 값을 저장소에 저장하여 값을 랜더링 가능
=> React에서 useState와 같이 "use"로 시작하는 다른 모든 함수를 훅이라고 하는데, useState는 컴포넌트별 저장소를 생성하는 리액트 훅
=> useState 사용 기본 양식: const [index, setIndex] = useState(0); -> const [변수, setter] = useState(초기 값); ([]는 배열 구조 분해로 배열로부터 값을 읽을 수 있게 함) : setter는 set으로 시작하는게 일반적인 규칙
=> 이는 컴포넌트 별로 인스턴스가 관리 됩니다.

* 랜더링 단계 이해하기 (with 리랜더링)
- 랜더링 : 화면에 표시할 UI를 그리는 것
=> 리액트에서는 화면에 표시할 UI(JSX)를 만들기 위해서는 컴포넌트를 호출해야함
** 컴포넌트를 화면에 표시하는 과정
 1. 랜더링 트리거
    리액트 컴포넌트가 랜더링을 시작하게 만드는 것
    => ReactDOM.createRoot(). **render()** : render() 메소드로 초기 랜더링
 2. 컴포넌트 랜더링
    => 리랜더링 초기 렌더링 이후 다양한 조건으로 리랜더링 (해당 하위 컴포넌트 모두) (state를 호출하여 관리 - 재호출 하는 것을 의미 - 변경된 DOM 노드가 있는지 계산하여)
 3. DOM에 커밋 (DOM 업데이트)
    => 변경된 노드만 변경 반영 ( 해당 컴포넌트 내 변경 된 요소만 )

** 렌더링은 DOM 업데이트를 의미하는 것이 아니다.
   즉, 실제로 DOM 업데이트가 발생되지 않더라도 컴포넌트에서는 렌더링이 발생할 수 있다.

** 리랜더링은 자주 반영되면 메모리 소모 및 비용 증가 -> 최적화 작업 필요 (하단은 조건)
    1. **초기 렌더링 :** **`root.render(<AppCourse />);`** 메서드를 호출하면 렌더링이 발생됩니다.
        - **예제코드**

            ```jsx
            import Image from './Image.js';
            import { createRoot } from 'react-dom/client';

            const root = createRoot(document.getElementById('root'))
            root.render(<Image />);
            ```

    2. **상태(State) 변화**: 컴포넌트의 상태가 변경되면 해당 컴포넌트와 그 하위 컴포넌트가 리렌더링됩니다.
        - **예제코드**

            ```jsx
            import React, { useState } from 'react';

            function Counter() {
              const [count, setCount] = useState(0);

              const increment = () => {
                setCount(count + 1); // 상태 변화 -> 리렌더링 발생
              };

              return (
                <div>
                  <p>Count: {count}</p>
                  <button onClick={increment}>Increment</button>
                </div>
              );
            }

            export default Counter;

            ```

    3. **프롭스(Props) 변화**: 부모 컴포넌트에서 전달된 프롭스가 변경되면 자식 컴포넌트가 리렌더링됩니다.
        - **예제코드**

            ```jsx
            import React, { useState } from 'react';

            function Child({ value }) {
              return <p>Value: {value}</p>;
            }

            function Parent() {
              const [value, setValue] = useState(0);

              const updateValue = () => {
                setValue(value + 1); // 프롭스 변화 -> Child 컴포넌트 리렌더링
              };

              return (
                <div>
                  <Child value={value} />
                  <button onClick={updateValue}>Update Value</button>
                </div>
              );
            }

            export default Parent;
            ```

    4. **부모 컴포넌트 리렌더링**: 부모 컴포넌트가 리렌더링되면 그 자식 컴포넌트도 리렌더링됩니다.
        - **예제코드**

            ```jsx
            import React, { useState } from 'react';

            function Child() {
              console.log('Child rendered');
              return <p>Child Component</p>;
            }

            function Parent() {
              const [value, setValue] = useState(0);

              const updateValue = () => {
                setValue(value + 1); // 부모 컴포넌트 리렌더링 -> Child 컴포넌트도 리렌더링
              };

              return (
                <div>
                  <Child />
                  <button onClick={updateValue}>Update Value</button>
                </div>
              );
            }

            export default Parent;
            ```

    5. **컨텍스트(Context) 변화**: 컨텍스트 값을 사용하는 컴포넌트는 해당 값이 변경될 때 리렌더링됩니다.
        - **예제코드**

            ```jsx
            import React, { createContext, useContext, useState } from 'react';

            const MyContext = createContext();

            function Child() {
              const value = useContext(MyContext);
              return <p>Context Value: {value}</p>;
            }

            function Parent() {
              const [value, setValue] = useState(0);

              const updateValue = () => {
                setValue(value + 1); // 컨텍스트 값 변화 -> Child 컴포넌트 리렌더링
              };

              return (
                <MyContext.Provider value={value}>
                  <Child />
                  <button onClick={updateValue}>Update Context Value</button>
                </MyContext.Provider>
              );
            }

            export default Parent;

            ```

    6. **포스 업데이트(Force Update)**: `forceUpdate()` 를 호출하면 해당 컴포넌트가 강제로 리렌더링됩니다.
        - **예제코드**

            ```jsx
            import React, { useState } from 'react';

            function ForceUpdateExample() {
              const [value, setValue] = useState(0);
              const [, forceUpdate] = useState(); // forceUpdate 사용

              const updateValue = () => {
                setValue(value + 1); // 상태 변화로 리렌더링
              };

              const triggerForceUpdate = () => {
                forceUpdate({}); // forceUpdate 호출 -> 강제 리렌더링
              };

              return (
                <div>
                  <p>Value: {value}</p>
                  <button onClick={updateValue}>Update Value</button>
                  <button onClick={triggerForceUpdate}>Force Update</button>
                </div>
              );
            }

            export default ForceUpdateExample;
            ```


* 순수한 컴포넌트
=> React 내에서는 컴포넌트에 같은 값을 넣은 경우 같은 출력 값을 기대 할 수 있어야함.
=> 전역변수로 변수 값을 카운팅 하는 등 .. -> 출력 값 일정하지 않게 되어 위배된다.

* StrictMode
개발 중에 컴포넌트에서 일반적인 버그를 빠르게 찾을 수 있도록 합니다.
 - 순수하지 않은 렌더링으로 인해 발생하는 버그를 찾기 위해 컴포넌트가  [추가로 다시 렌더링됩니다.] (https://ko.react.dev/reference/react/StrictMode#fixing-bugs-found-by-double-rendering-in-development)
 - Effect 클린업이 누락되어 발생하는 버그를 찾기 위해 컴포넌트가  [추가로 Effect를 다시 실행합니다.] (https://ko.react.dev/reference/react/StrictMode#fixing-bugs-found-by-re-running-effects-in-development)
 - [더 이상 사용되지 않는 API의 사용 여부를 확인] (https://ko.react.dev/reference/react/StrictMode#fixing-deprecation-warnings-enabled-by-strict-mode)하기 위해 컴포넌트를 검사
 - 하위 컴포넌트에서 props로 얕은 복사로 변수 선언후 컴포넌트를 재 랜더링 할 경우 부모 컴포넌트의 변수 값에 영향을 끼칠 가능성이 있으므로 주의
 --> const example = [...props]; 형태로 깊은 복사를 통한 부모 컴포넌트에 영향을 주면 안된다.

 * 스냅샷으로서의 State
 State 변수는 읽고 쓸 수 있는 일반 자바스크립트 변수처럼 보일 수 있습니다. 하지만 state는 스냅샷처럼 동작합니다. state 변수를 설정하여도 이미 가지고 있는 state 변수는 변경되지 않고, 대신 리렌더링이 발동됩니다.
 => https://ko.react.dev/learn/state-as-a-snapshot
 ** 코드 예제
 const [counter, setCounter] = useState(0); 와 같은 State에서 다음과같이 setter로 3번 호출하면 값이 3이 아니라 1이 출력되는데..
 setCounter(counter + 1);
 setCounter(counter + 1);
 setCounter(counter + 1);
 그이유는 다음과 같다.
 setCounter(0 + 1); 을 세번 호출한 것과 동일 하기 때문. 스냅샷 처럼 초기 값을 저장해두기 때문
 => React가 컴포넌트, 즉 함수를 호출한다는 뜻입니다. 해당 함수에서 반환하는 JSX는 시간상 UI의 스냅샷과 같습니다. prop, 이벤트 핸들러, 로컬 변수는 모두 렌더링 당시의 state를 사용해 계산됩니다.
 ==> 랜더링 시점에 State를 스냅샷을 다시 찍는 것

 * batching & 업데이트 함수 : https://gymcoding.notion.site/batching-0b9066b1f04e4d8b9a7d3142664c168f
 "배칭(batching)"이란 여러 개의 상태(state) 업데이트를 하나의 리렌더링으로 묶어서 처리하는 것을 의미합니다. 배칭은 리액트의 성능 최적화 기법 중 하나로, 상태 업데이트가 발생할 때마다 개별적으로 렌더링을 수행하는 대신, 여러 개의 업데이트를 모아서 한 번에 처리하여 불필요한 리렌더링을 줄여줍니다.
 ex) 레스토랑에서 종업원이 손님이 주문하는 첫번째 메뉴를 듣자마자 주방으로 달려가지 않듯이Batching은 반드시 필요한 하나의 리렌더링을 수행한다.
 + => https://ko.react.dev/learn/queueing-a-series-of-state-updates
  ** 다음 렌더링 전에 동일한 state 변수를 여러 번 업데이트하기
  type SetStateAction<S> = S | ((prevState: S) => S); 와 같이 콜백으로 받아 사용하는데 ..
  이와 같이 콜백 함수로 사용하면
  setCounter((c) => c + 1);
  setCounter((c) => c + 1);
  setCounter((c) => c + 1);
  초기 값 + 1 -> (이전 값 + 1) -> (그 이전 값 + 1) 으로 초기 값이 0이면 3이 출력 된다.
  (setter를 여러번 사용해서 한번에 랜더링 하고 싶다면 콜백 함수로)

* 객체 State 업데이트 하기
State는 객체를 포함한 모든 종류의 자바스크립트 값을 가질 수 있습니다.
하지만 리액트 state가 가진 객체를 직접 변경해서는 안 됩니다. !!
객체를 업데이트하고 싶을 때는 !!!!새로운 객체를 생성!!!!하여 (또는 기존 객체의 복사본을 만들어), state가 복사본을 사용하도록 하세요.

* (Deep Copy vs Shallow Copy) (깊은 복사 vs 얕은 복사)
** 얕은 복사(Shallow Copy) 란 객체의 최상위 속성들만 복사하는 방식
  복사된 객체의 속성들은 최상위 속성만 복사 되고 중첩된 객체 속성은 원본 객체의 속성과 동일한 참조를 공유합니다.
  즉, 복사본이나 원본을 변경하면 중첩된 객체의 속성은 서로 영향을 주게 됩니다.

  얕은 복사 예시)
  const original = {
    name: '홍길동',
    info: {
      age: 30
    }
  } 과 같은 객체에서
  const copy = {...original} // 얕은 복사 진행 후
  copy.name = '김철수'
  copy.info.age = 50을 수행한 결과로

  orignal {
    name: '홍길동',
    info : { age: 50 }
  }

  copy {
    name: '김철수',
    info : { age: 50 }
  } 과 같이 출력하게 되는데. "최상위 속성은 영향을 주지 않지만 중첩된 속성을 수정하는 경우 같은 참조(주소) 값을 바라보기 때문에 원본에도 영향을 끼치게 된다."

  사용 방법 : 스프레드 연산자 (...), Object.assign(), 배열의 slice(), concat(), Array.from()

** 깊은 복사(Deep Copy)
  객체의 모든 속성과 중첩된 객체들을 완전히 새로운 메모리에 복사하는 방식. 따라서 어떠한 참조도 공유하지 않으므로 다른 쪽에 영향을 주지 않음.

  깊은 복사 예시)
  const original = {
    name: '홍길동',
    info: {
      age: 30
    }
  } 과 같은 객체에서

  const copy = JSON.parse(JSON.stringify(original))

  copy.name = '김철수'
  copy.info.age = 50

  각 다른 출력 결과가 출력 됨.

  사용 방법 : JSON.stringify() + JSON.parse() -> js 사용 (가장 간단한 방법), loadash의 structuredClone() 사용 (최신 웹 API), 재귀적 복사 함수 구현

  정리 : 얕은복사는 최상위 속성만 변경이 필요하거나 성능이 중요한 경우, 중첩된 객체가 없거나 변경할 필요 없는 경우
        깊은 복사는 상태 관리 라이브러리(Redux, MobX)에서 불변성 유지, 원본 데이터 보존하며 변형 필요할 때, 복잡한 객체 구조에서 독립적인 사본이 필요할 때

* 중첩 객체 업데이트 (with Immer)
만약 얕은 복사로 최상위 뿐만 아니라 하위 속성들 또한 참조 없이 복사를 하고 싶다면 ..
=> const original = {
     name: '홍길동',
     info: {
       age: 30
     }
   } 과 같은 객체에서

   const newObj = {
     ...original,
     info: {
        ...original.ionfo
     }
   }
   와 같이 업데이트 하면 원본 영향 없이 복사 가능

   state가 깊이 중첩되어 있다면, 평탄화 작업을 고려해볼 수 있는데.. 만약 state 구조를 바꾸고 싶지 않드면 중첩 전개할 수 있는 Immer 라이브러리를 사용하면 된다.
   설치 명령어 --> npm i use-immer
   이후, import { useState } from 'react'를 import { useImmer } from 'use-immer'로 교체하여 사용

   콜백 함수를 넘길 수 있는데 인자로 설정했던 객체가 파라미터로 넘어오게됨.
   해당 코드블록 안에서 객체를 수정할 수 있으므로 자세한 사용 코드는 (feat: 객체 업데이트 (with Immer 라이브러리), refactor: useState to Immer Library) 커밋 참고
   => 객체 생성 없이 바로 수정할 수 있는 이유? : Immer가 제공하는 draft는 Proxy 객체 타입으로 동작을 기록하여 내부적으로 어느 부분이 변경되었는지 파악하여 변경사항을 포함한 완전히 새로운 객체를 생성하기 때문.

* 배열 State 업데이트 하기
배열 또한 마찬가지로 state에 저장된 배열을 업데이트하고 싶은 경우, 새 배열 혹은, 새 배열을 state로 두어 업데이트해야 한다.
=> 요약: 중첩된 state를 업데이트할 때, 업데이트하려는 지점부터 최상위 레벨까지의 복사본을 만들어야 한다.
선호 방식은 다음 링크 참고) https://ko.react.dev/learn/updating-arrays-in-state
 ** 배열 항목 중간 삽입은 배열 State 업데이트 (2) 커밋 참조

* 최신 Array API 로 업데이트 하기

** 참고 사이트
immutable: https://gymcoding.notion.site/Array-API-d514bf8a9a474d03985c6446bf5da6ef
MDN: https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted
reverseAPI를 사용할 수 있으나, 원본 배열이 변경시키므로 새로운 변수에 할당하여 사용하여야 한다.
이와 같이 원본 배열을 변경하는 JS 함수를 mutable(변경가능한) 함수 라고 하며 변경 불가능한 함수를 immutable 이라고 한다.

예를 들면 ..
const arr = [1, 2, 3]; arr.reverse();
: arr = [3, 2, 1]
const arr = [1, 2, 3]; arr2 = arr.toReversed();
: arr = [1, 2, 3], arr2 = [3, 2, 1]
위와 비슷하게 immer 라이브러리를 사용한다면 내부에서 배열을 복제하여 할당하기 때문에 불필요한 로직 추가가 필요 없어짐.

* state 로직을 reducer로 관리하는 방법
https://ko.react.dev/learn/extracting-state-logic-into-a-reducer#%EC%9A%94%EC%95%BD
https://ko.react.dev/reference/react/useReducer
한 컴포넌트에서 state 업데이트가 여러 이벤트 핸들러로 분산 되어있는 경우가 잦다. (지금 까지의 커밋 기록)
이 경우 컴포넌트를 관리하기 어려워 지고 .. 이를 해결하기 위해 state를 업데이트하는 모든 로직을 reducer를 사용해 컴포넌트 외부로 단일 함수로 "통합해 관리"할 수 있습니다.

비즈니스 로직은 switch 문이 일반적

  1. useState에서 useReducer로 변환하려면 이벤트 핸들러에서 action을 전달합니다.
    1.1 주어진 state와 action에 대해 다음 state를 반환하는 reducer 함수를 작성합니다.
    1.2 useState를 useReducer로 바꿉니다.
  2. reducer를 사용하면 코드를 조금 더 작성해야 하지만 디버깅과 테스트에 도움이 됩니다.
  3. reducer는 반드시 순수해야 합니다. (렌더링 중 실행되기 때문)
  4. 각 action은 단일 사용자 상호작용을 설명해야 합니다.
  5. 객체와 배열을 변경하는 스타일로 reducer를 작성하려면 Immer 라이브러리를 사용하세요.

  + useImmerReducer를 사용하면 Immer와 마찬가지로 로직 내 객체를 생성하여 수정하기 때문에 직접 수정 가능하게 됩니다.

* 한글 이슈로 이벤트가 두번 처리 되는 경우
event.nativeEvent.isComposing 이 false 인 경우 수행하도록 로직 추가
isComposing 은 문장 완성 (한글의 경우 자음과 모음이 합쳐 지는 경우)
+ event로 접근하여도 안나오는 경우 브라우저 이벤트 접근 방법은 event 하위의 nativeEvent 객체에 접근

* React Context API의 상태 공유 : 전역 상태 관리 (테마 관리, 현재 계정, 라우팅, 상태 관리에서 주로 사용)
https://gymcoding.notion.site/React-Context-API-d87d736253c948f99da19ab4f99e7eab
부모 컴포넌트에서 자식 컴포넌트로 props로 정보를 전달했는데, 만약 중간에 수많은 컴포넌트를 거쳐야 전달해야 한다면 불필요하게 계속 전달 해야함.. => "prop drilling 현상"
이를 ContextAPI를 사용하면 부모가 트리 내부 전체에, 심지어 멀리 떨어진 컴포넌트에조차 props를 제공 할 수 있게 된다.
  ** 사용방법
  1. Context 생성 : 초기 값 지정
  2. Context 사용
  3. Context 제공 : 1 에서 생성한 Context의 Provider 호출 및 초기 값 지정

  ** Provider를 중복해서 하위 컴포넌트에 사용 한 경우
  부모로부터 가장 가까운 Provider로 부터 상속 받는다.

요약 : Provider로 컴포넌트의 State를 변경하게 되면 리랜더링이 발생. 따라서 하위 모든 컴포넌트가 리랜더링이 되기 때문에 자주 변경 되지 않는 데이터로 지정하는 것이 좋다.
만약, 전역 상태로 관리해야한다면 꼭 필요한 Section에서만 사용해야한다. (리 랜더링이 필요한 부모 컴포넌트에서만 Context API 사용)
+ 꼭 depth 가 깊게 전달해야한다고 해도 반드시 나쁜 것은 아니므로 .. 애매한 경우 일단 props로 개발하고 추후 리팩토링하는 것이 좋은 방법일 수도 있다고 한다.


* Reducer와 Context로 앱 확장하기
하위 컴포넌트들에서 해당 상태를 읽거나 변경하려고 하면 최상위 루트 컴포넌트에서 props로 받아야하는 불편함이 있다.
기존 Reducer를 이용하면 손쉽게 상태 관리가 가능하다.
=> *** refactor-Reducer&ContextAPI 브랜치 참고






